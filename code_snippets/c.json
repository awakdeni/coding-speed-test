[
    "#include <stdio.h>\n#include <stdlib.h>\n\nint compare(const void *a, const void *b) {\n    return (*(int*)a - *(int*)b);\n}\n\nvoid bubbleSort(int arr[], int n) {\n    for (int i = 0; i < n-1; i++) {\n        for (int j = 0; j < n-i-1; j++) {\n            if (arr[j] > arr[j+1]) {\n                int temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n}\n\nint main() {\n    int arr[] = {64, 34, 25, 12, 22, 11, 90};\n    int n = sizeof(arr)/sizeof(arr[0]);\n    \n    bubbleSort(arr, n);\n    \n    printf(\"Sorted array: \");\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    \n    return 0;\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct Node {\n    int data;\n    struct Node* next;\n} Node;\n\ntypedef struct {\n    Node* head;\n    int size;\n} LinkedList;\n\nLinkedList* createList() {\n    LinkedList* list = malloc(sizeof(LinkedList));\n    list->head = NULL;\n    list->size = 0;\n    return list;\n}\n\nvoid insert(LinkedList* list, int data) {\n    Node* newNode = malloc(sizeof(Node));\n    newNode->data = data;\n    newNode->next = list->head;\n    list->head = newNode;\n    list->size++;\n}\n\nvoid printList(LinkedList* list) {\n    Node* current = list->head;\n    while (current != NULL) {\n        printf(\"%d -> \", current->data);\n        current = current->next;\n    }\n    printf(\"NULL\\n\");\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n\nint binarySearch(int arr[], int left, int right, int target) {\n    if (right >= left) {\n        int mid = left + (right - left) / 2;\n        \n        if (arr[mid] == target)\n            return mid;\n        \n        if (arr[mid] > target)\n            return binarySearch(arr, left, mid - 1, target);\n        \n        return binarySearch(arr, mid + 1, right, target);\n    }\n    \n    return -1;\n}\n\nvoid merge(int arr[], int left, int mid, int right) {\n    int i, j, k;\n    int n1 = mid - left + 1;\n    int n2 = right - mid;\n    \n    int L[n1], R[n2];\n    \n    for (i = 0; i < n1; i++)\n        L[i] = arr[left + i];\n    for (j = 0; j < n2; j++)\n        R[j] = arr[mid + 1 + j];\n    \n    i = 0; j = 0; k = left;\n    \n    while (i < n1 && j < n2) {\n        if (L[i] <= R[j]) {\n            arr[k] = L[i];\n            i++;\n        } else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n    \n    while (i < n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n    \n    while (j < n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}",
    "#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\ntypedef struct {\n    int* data;\n    int capacity;\n    int size;\n} DynamicArray;\n\nDynamicArray* createArray(int initialCapacity) {\n    DynamicArray* arr = malloc(sizeof(DynamicArray));\n    arr->data = malloc(initialCapacity * sizeof(int));\n    arr->capacity = initialCapacity;\n    arr->size = 0;\n    return arr;\n}\n\nvoid resize(DynamicArray* arr) {\n    arr->capacity *= 2;\n    arr->data = realloc(arr->data, arr->capacity * sizeof(int));\n}\n\nvoid push(DynamicArray* arr, int value) {\n    if (arr->size >= arr->capacity) {\n        resize(arr);\n    }\n    arr->data[arr->size++] = value;\n}\n\nint pop(DynamicArray* arr) {\n    if (arr->size > 0) {\n        return arr->data[--arr->size];\n    }\n    return -1; // Error value\n}\n\nvoid freeArray(DynamicArray* arr) {\n    free(arr->data);\n    free(arr);\n}",
    "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\nint isPalindrome(char* str) {\n    int left = 0;\n    int right = strlen(str) - 1;\n    \n    while (left < right) {\n        while (left < right && !isalnum(str[left])) {\n            left++;\n        }\n        \n        while (left < right && !isalnum(str[right])) {\n            right--;\n        }\n        \n        if (tolower(str[left]) != tolower(str[right])) {\n            return 0;\n        }\n        \n        left++;\n        right--;\n    }\n    \n    return 1;\n}\n\nvoid reverseString(char* str) {\n    int length = strlen(str);\n    for (int i = 0; i < length / 2; i++) {\n        char temp = str[i];\n        str[i] = str[length - 1 - i];\n        str[length - 1 - i] = temp;\n    }\n}\n\nint countWords(char* str) {\n    int count = 0;\n    int inWord = 0;\n    \n    for (int i = 0; str[i] != '\\0'; i++) {\n        if (isspace(str[i])) {\n            inWord = 0;\n        } else if (!inWord) {\n            inWord = 1;\n            count++;\n        }\n    }\n    \n    return count;\n}"
]