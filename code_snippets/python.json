[
    "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\nif __name__ == \"__main__\":\n    data = [64, 34, 25, 12, 22, 11, 90]\n    bubble_sort(data)\n    print(\"Sorted array:\", data)",
    "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n        self.size = 0\n    \n    def insert(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n        self.size += 1\n    \n    def print_list(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" -> \")\n            current = current.next\n        print(\"None\")","def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n\ndef merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n        \n        merge_sort(L)\n        merge_sort(R)\n        \n        i = j = k = 0\n        \n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n        \n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        \n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1","class DynamicArray:\n    def __init__(self, initial_capacity=10):\n        self.capacity = initial_capacity\n        self.size = 0\n        self.data = [None] * self.capacity\n    \n    def resize(self):\n        self.capacity *= 2\n        new_data = [None] * self.capacity\n        for i in range(self.size):\n            new_data[i] = self.data[i]\n        self.data = new_data\n    \n    def append(self, value):\n        if self.size >= self.capacity:\n            self.resize()\n        self.data[self.size] = value\n        self.size += 1\n    \n    def pop(self):\n        if self.size > 0:\n            self.size -= 1\n            return self.data[self.size]\n        return None\n    \n    def __str__(self):\n        return str(self.data[:self.size])","def is_palindrome(s):\n    s = ''.join(c.lower() for c in s if c.isalnum())\n    return s == s[::-1]\n\n\ndef reverse_string(s):\n    return s[::-1]\n\n\ndef count_words(s):\n    return len(s.split())\n\n\nif __name__ == \"__main__\":\n    test_str = \"A man, a plan, a canal: Panama\"\n    print(f\"Is palindrome: {is_palindrome(test_str)}\")\n    print(f\"Reversed: {reverse_string(test_str)}\")\n    print(f\"Word count: {count_words(test_str)}\")"
]