[
    "<?php\nclass Database {\n    private $host = 'localhost';\n    private $db_name = 'test_db';\n    private $username = 'root';\n    private $password = '';\n    private $conn;\n\n    public function connect() {\n        $this->conn = null;\n\n        try {\n            $this->conn = new PDO(\"mysql:host=\".$this->host.\";dbname=\".$this->db_name, \n                                $this->username, $this->password);\n            $this->conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n        } catch(PDOException $e) {\n            echo \"Connection error: \" . $e->getMessage();\n        }\n\n        return $this->conn;\n    }\n\n    public function create($table, $data) {\n        $columns = implode(', ', array_keys($data));\n        $placeholders = ':' . implode(', :', array_keys($data));\n        $sql = \"INSERT INTO $table ($columns) VALUES ($placeholders)\";\n\n        $stmt = $this->conn->prepare($sql);\n        return $stmt->execute($data);\n    }\n\n    public function read($table, $id) {\n        $sql = \"SELECT * FROM $table WHERE id = :id\";\n        $stmt = $this->conn->prepare($sql);\n        $stmt->execute(['id' => $id]);\n        return $stmt->fetch(PDO::FETCH_ASSOC);\n    }\n}",
    "<?php\nsession_start();\n\nclass Auth {\n    public static function login($email, $password) {\n        // Validate credentials against database\n        $user = self::getUserByEmail($email);\n        \n        if ($user && password_verify($password, $user['password'])) {\n            $_SESSION['user_id'] = $user['id'];\n            $_SESSION['user_email'] = $user['email'];\n            return true;\n        }\n        return false;\n    }\n\n    public static function logout() {\n        session_unset();\n        session_destroy();\n    }\n\n    public static function isLoggedIn() {\n        return isset($_SESSION['user_id']);\n    }\n\n    public static function getUserByEmail($email) {\n        // This would query your database\n        // Mock data for example:\n        $users = [\n            'test@example.com' => [\n                'id' => 1,\n                'email' => 'test@example.com',\n                'password' => password_hash('password123', PASSWORD_DEFAULT)\n            ]\n        ];\n        \n        return $users[$email] ?? null;\n    }\n\n    public static function register($email, $password) {\n        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\n        // Save to database\n        return true;\n    }\n}",
    "<?php\nheader(\"Content-Type: application/json\");\nrequire_once 'Database.php';\n\n$response = ['status' => 'error', 'message' => 'Invalid request'];\n\nif ($_SERVER['REQUEST_METHOD'] === 'GET') {\n    try {\n        $db = new Database();\n        $conn = $db->connect();\n        \n        $stmt = $conn->query(\"SELECT * FROM products\");\n        $products = $stmt->fetchAll(PDO::FETCH_ASSOC);\n        \n        $response = [\n            'status' => 'success',\n            'data' => $products\n        ];\n    } catch(PDOException $e) {\n        $response['message'] = $e->getMessage();\n    }\n} elseif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $input = json_decode(file_get_contents('php://input'), true);\n    \n    if (!empty($input['name']) && !empty($input['price'])) {\n        try {\n            $db = new Database();\n            $conn = $db->connect();\n            \n            $data = [\n                'name' => $input['name'],\n                'price' => $input['price'],\n                'created_at' => date('Y-m-d H:i:s')\n            ];\n            \n            if ($conn->prepare(\"INSERT INTO products (name, price, created_at) VALUES (:name, :price, :created_at)\")->execute($data)) {\n                $response = ['status' => 'success', 'message' => 'Product added'];\n            }\n        } catch(PDOException $e) {\n            $response['message'] = $e->getMessage();\n        }\n    } else {\n        $response['message'] = 'Missing required fields';\n    }\n}\n\necho json_encode($response);",
    "<?php\n$uploadDir = 'uploads/';\n$allowedTypes = ['image/jpeg', 'image/png', 'application/pdf'];\n$maxSize = 2 * 1024 * 1024; // 2MB\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_FILES['file'])) {\n    $file = $_FILES['file'];\n    \n    // Validate file\n    if ($file['error'] !== UPLOAD_ERR_OK) {\n        die(\"Upload failed with error code \" . $file['error']);\n    }\n    \n    if (!in_array($file['type'], $allowedTypes)) {\n        die(\"Invalid file type\");\n    }\n    \n    if ($file['size'] > $maxSize) {\n        die(\"File too large\");\n    }\n    \n    // Generate unique filename\n    $extension = pathinfo($file['name'], PATHINFO_EXTENSION);\n    $filename = uniqid() . '.' . $extension;\n    $destination = $uploadDir . $filename;\n    \n    if (move_uploaded_file($file['tmp_name'], $destination)) {\n        echo \"File uploaded successfully: \" . htmlspecialchars($filename);\n    } else {\n        echo \"Failed to move uploaded file\";\n    }\n} else {\n    echo \"<form method='post' enctype='multipart/form-data'>\n            <input type='file' name='file'>\n            <button type='submit'>Upload</button>\n          </form>\";\n}",
    "<?php\n// Model\nclass UserModel {\n    private $db;\n    \n    public function __construct($db) {\n        $this->db = $db;\n    }\n    \n    public function getUsers() {\n        return $this->db->query(\"SELECT * FROM users\")->fetchAll();\n    }\n    \n    public function getUserById($id) {\n        $stmt = $this->db->prepare(\"SELECT * FROM users WHERE id = ?\");\n        $stmt->execute([$id]);\n        return $stmt->fetch();\n    }\n}\n\n// Controller\nclass UserController {\n    private $model;\n    \n    public function __construct($model) {\n        $this->model = $model;\n    }\n    \n    public function index() {\n        $users = $this->model->getUsers();\n        include 'views/users/index.php';\n    }\n    \n    public function show($id) {\n        $user = $this->model->getUserById($id);\n        include 'views/users/show.php';\n    }\n}\n\n// Bootstrap\n$db = new PDO('mysql:host=localhost;dbname=test', 'root', '');\n$model = new UserModel($db);\n$controller = new UserController($model);\n\n// Router (simplified)\n$action = $_GET['action'] ?? 'index';\n$id = $_GET['id'] ?? null;\n\nif ($action === 'show' && $id) {\n    $controller->show($id);\n} else {\n    $controller->index();\n}",
    "<?php\nrequire 'vendor/autoload.php';\n\n// In src/Email.php\n/*\nnamespace App\\Services;\n\nclass Email {\n    public static function send($to, $subject, $message) {\n        $headers = \"From: webmaster@example.com\\r\\n\";\n        $headers .= \"Reply-To: webmaster@example.com\\r\\n\";\n        $headers .= \"Content-Type: text/html; charset=UTF-8\\r\\n\";\n        \n        return mail($to, $subject, $message, $headers);\n    }\n}\n*/\n\n// Usage\nuse App\\Services\\Email;\n\nif (Email::send('recipient@example.com', 'Test Subject', '<h1>Test Message</h1>')) {\n    echo \"Email sent successfully\";\n} else {\n    echo \"Failed to send email\";\n}\n\n// composer.json would include:\n/*\n{\n    \"autoload\": {\n        \"psr-4\": {\n            \"App\\\\\": \"src/\"\n        }\n    }\n}\n*/",
    "<?php\n// In tests/CalculatorTest.php\n/*\nuse PHPUnit\\Framework\\TestCase;\n\nclass CalculatorTest extends TestCase {\n    public function testAdd() {\n        $calculator = new Calculator();\n        $this->assertEquals(4, $calculator->add(2, 2));\n        $this->assertEquals(0, $calculator->add(-2, 2));\n    }\n    \n    public function testDivide() {\n        $calculator = new Calculator();\n        $this->assertEquals(2, $calculator->divide(4, 2));\n        $this->expectException(\\InvalidArgumentException::class);\n        $calculator->divide(4, 0);\n    }\n}\n\n// In src/Calculator.php\nclass Calculator {\n    public function add($a, $b) {\n        return $a + $b;\n    }\n    \n    public function divide($a, $b) {\n        if ($b == 0) {\n            throw new \\InvalidArgumentException(\"Division by zero\");\n        }\n        return $a / $b;\n    }\n}\n*/\n\n// To run: ./vendor/bin/phpunit tests/CalculatorTest.php"
]