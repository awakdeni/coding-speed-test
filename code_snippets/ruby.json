[
    "def bubble_sort(arr)\n  n = arr.length\n  (0...n).each do |i|\n    (0...n-i-1).each do |j|\n      if arr[j] > arr[j+1]\n        arr[j], arr[j+1] = arr[j+1], arr[j]\n      end\n    end\n  end\n  arr\nend\n\n# Contoh penggunaan\narray = [64, 34, 25, 12, 22, 11, 90]\nsorted_array = bubble_sort(array)\nputs \"Sorted array: #{sorted_array}\"",
    "class Node\n  attr_accessor :data, :next\n\n  def initialize(data)\n    @data = data\n    @next = nil\n  end\nend\n\nclass LinkedList\n  def initialize\n    @head = nil\n    @size = 0\n  end\n\n  def insert(data)\n    new_node = Node.new(data)\n    new_node.next = @head\n    @head = new_node\n    @size += 1\n  end\n\n  def print_list\n    current = @head\n    while current\n      print \"#{current.data} -> \"\n      current = current.next\n    end\n    puts \"nil\"\n  end\nend",
    "def binary_search(arr, target)\n  left = 0\n  right = arr.length - 1\n\n  while left <= right\n    mid = left + (right - left) / 2\n    if arr[mid] == target\n      return mid\n    elsif arr[mid] < target\n      left = mid + 1\n    else\n      right = mid - 1\n    end\n  end\n  -1\nend\n\ndef merge_sort(arr)\n  return arr if arr.length <= 1\n\n  mid = arr.length / 2\n  left = merge_sort(arr[0...mid])\n  right = merge_sort(arr[mid..-1])\n\n  merge(left, right)\nend\n\ndef merge(left, right)\n  result = []\n  until left.empty? || right.empty?\n    if left.first <= right.first\n      result << left.shift\n    else\n      result << right.shift\n    end\n  end\n  result + left + right\nend",
    "class DynamicArray\n  def initialize(initial_capacity = 10)\n    @capacity = initial_capacity\n    @size = 0\n    @data = Array.new(@capacity)\n  end\n\n  def resize\n    @capacity *= 2\n    new_data = Array.new(@capacity)\n    @data.each_with_index { |val, i| new_data[i] = val }\n    @data = new_data\n  end\n\n  def push(value)\n    resize if @size >= @capacity\n    @data[@size] = value\n    @size += 1\n  end\n\n  def pop\n    return nil if @size == 0\n    @size -= 1\n    @data[@size]\n  end\n\n  def to_s\n    @data[0...@size].to_s\n  end\nend",
    "def palindrome?(str)\n  clean_str = str.downcase.gsub(/[^a-z0-9]/, '')\n  clean_str == clean_str.reverse\nend\n\ndef reverse_string(str)\n  str.reverse\nend\n\ndef count_words(str)\n  str.split.size\nend\n\n# Contoh penggunaan\ntest_str = \"A man, a plan, a canal: Panama\"\nputs \"Is palindrome: #{palindrome?(test_str)}\"\nputs \"Reversed: #{reverse_string(test_str)}\"\nputs \"Word count: #{count_words(test_str)}\"","def greet\n  puts \"Before yield\"\n  yield\n  puts \"After yield\"\nend\n\ngreet { puts \"Hello from the block!\" }\n\n# Contoh dengan parameter\ndef calculate(a, b)\n  yield(a, b)\nend\n\nsum = calculate(5, 3) { |x, y| x + y }\nproduct = calculate(5, 3) { |x, y| x * y }\n\nputs \"Sum: #{sum}\"\nputs \"Product: #{product}\""
]