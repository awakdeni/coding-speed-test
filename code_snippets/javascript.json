[
    "// worker.js\nself.onmessage = function(e) {\n  const { data } = e;\n  \n  // Simulate heavy computation\n  const result = data.map(num => {\n    let sum = 0;\n    for (let i = 0; i < num * 1000000; i++) {\n      sum += Math.sqrt(i);\n    }\n    return sum;\n  });\n  \n  self.postMessage(result);\n};\n\n// main.js\nconst worker = new Worker('worker.js');\n\nworker.onmessage = function(e) {\n  console.log('Result from worker:', e.data);\n};\n\nworker.postMessage([10, 20, 30]);\n\n// Terminate when done\n// worker.terminate();",
    "// Save data\nlocalStorage.setItem('theme', 'dark');\nsessionStorage.setItem('session-id', 'abc123');\n\n// Get data\nconst theme = localStorage.getItem('theme') || 'light';\nconsole.log(theme);\n\n// Remove data\nlocalStorage.removeItem('theme');\n\n// Clear all\n// localStorage.clear();\n\n// Custom storage class\nclass AppStorage {\n  constructor(namespace) {\n    this.namespace = namespace;\n  }\n  \n  set(key, value) {\n    localStorage.setItem(`${this.namespace}:${key}`, JSON.stringify(value));\n  }\n  \n  get(key) {\n    const value = localStorage.getItem(`${this.namespace}:${key}`);\n    return value ? JSON.parse(value) : null;\n  }\n}\n\nconst userStorage = new AppStorage('user');\nuserStorage.set('preferences', { theme: 'dark', notifications: true });",
    "// Object destructuring\nconst user = {\n  id: 1,\n  name: 'John Doe',\n  email: 'john@example.com',\n  address: {\n    city: 'New York',\n    country: 'USA'\n  }\n};\n\nconst { name, email, address: { city } } = user;\nconsole.log(name, email, city);\n\n// Array destructuring\nconst numbers = [1, 2, 3, 4, 5];\nconst [first, second, ...rest] = numbers;\nconsole.log(first, second, rest);\n\n// Function parameter destructuring\nconst printUser = ({ name, email }) => {\n  console.log(`${name} <${email}>`);\n};\n\nprintUser(user);",
    "// math.js\nexport const add = (a, b) => a + b;\nexport const subtract = (a, b) => a - b;\n\nexport default function multiply(a, b) {\n  return a * b;\n}\n\n// app.js\nimport multiply, { add, subtract } from './math.js';\n\nconsole.log(add(2, 3));      // 5\nconsole.log(subtract(5, 2)); // 3\nconsole.log(multiply(2, 4)); // 8\n\n// Dynamic import\nconst loadModule = async () => {\n  const module = await import('./math.js');\n  console.log(module.add(10, 20));\n};\n\nloadModule();",
    "// Higher-order function\nconst createMultiplier = (factor) => {\n  // Closure capturing the factor\n  return (number) => number * factor;\n};\n\nconst double = createMultiplier(2);\nconst triple = createMultiplier(3);\n\nconsole.log(double(5)); // 10\nconsole.log(triple(5)); // 15\n\n// Function composition\nconst pipe = (...fns) => (x) => fns.reduce((v, f) => f(v), x);\n\nconst add5 = x => x + 5;\nconst multiplyBy2 = x => x * 2;\nconst subtract10 = x => x - 10;\n\nconst transform = pipe(add5, multiplyBy2, subtract10);\nconsole.log(transform(10)); // (10 + 5) * 2 - 10 = 20",
    "const getUsers = async () => {\n  try {\n    const response = await fetch('https://jsonplaceholder.typicode.com/users');\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    return data.map(user => ({\n      id: user.id,\n      name: user.name,\n      email: user.email\n    }));\n  } catch (error) {\n    console.error('Failed to fetch users:', error);\n    return []; // Return empty array as fallback\n  }\n};\n\n// Usage\n(async () => {\n  const users = await getUsers();\n  console.log('Users:', users);\n})();",
    "// Create element\nconst createButton = (text, onClick) => {\n  const button = document.createElement('button');\n  button.textContent = text;\n  button.addEventListener('click', onClick);\n  return button;\n};\n\n// Toggle theme example\ndocument.addEventListener('DOMContentLoaded', () => {\n  const app = document.getElementById('app');\n  \n  const toggleTheme = () => {\n    document.body.classList.toggle('dark-mode');\n  };\n  \n  const button = createButton('Toggle Dark Mode', toggleTheme);\n  app.appendChild(button);\n  \n  // Event delegation example\n  app.addEventListener('click', (event) => {\n    if (event.target.tagName === 'BUTTON') {\n      console.log('Button clicked:', event.target.textContent);\n    }\n  });\n});",
    "const products = [\n  { id: 1, name: 'Laptop', price: 999.99, inStock: true },\n  { id: 2, name: 'Mouse', price: 24.99, inStock: false },\n  { id: 3, name: 'Keyboard', price: 49.99, inStock: true },\n  { id: 4, name: 'Monitor', price: 249.99, inStock: true }\n];\n\n// Map: Transform array\nconst productNames = products.map(product => product.name);\n\n// Filter: Select subset\nconst availableProducts = products.filter(product => product.inStock);\n\n// Reduce: Accumulate values\nconst totalInventoryValue = products\n  .filter(product => product.inStock)\n  .reduce((sum, product) => sum + product.price, 0);\n\nconsole.log({ productNames, availableProducts, totalInventoryValue });",
    "const fetchData = (url) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (url.startsWith('https://')) {\n        resolve({ data: 'Sample data', status: 200 });\n      } else {\n        reject(new Error('Invalid URL protocol'));\n      }\n    }, 1000);\n  });\n};\n\n// Using then/catch\nfetchData('https://api.example.com')\n  .then(response => console.log(response))\n  .catch(error => console.error(error));\n\n// Using async/await\nasync function getData() {\n  try {\n    const response = await fetchData('https://api.example.com');\n    console.log(response);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\ngetData();",
    "class Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n\n  greet() {\n    return `Hello, my name is ${this.name} and I'm ${this.age} years old.`;\n  }\n\n  static compareAges(person1, person2) {\n    return person1.age - person2.age;\n  }\n}\n\n// Usage\nconst alice = new Person('Alice', 28);\nconst bob = new Person('Bob', 32);\nconsole.log(alice.greet());\nconsole.log(Person.compareAges(alice, bob));"
]