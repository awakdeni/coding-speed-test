[
    "interface Product {\n  id: number;\n  name: string;\n  price: number;\n  description?: string;\n  inStock: boolean;\n}\n\n// Partial: Make all properties optional\ntype PartialProduct = Partial<Product>;\nconst partialProd: PartialProduct = { name: 'Laptop' };\n\n// Required: Make all properties required\ntype RequiredProduct = Required<Product>;\nconst requiredProd: RequiredProduct = {\n  id: 1,\n  name: 'Phone',\n  price: 599,\n  description: 'Smartphone',\n  inStock: true\n};\n\n// Pick: Select specific properties\ntype ProductPreview = Pick<Product, 'id' | 'name' | 'price'>;\nconst preview: ProductPreview = { id: 2, name: 'Tablet', price: 299 };\n\n// Omit: Remove specific properties\ntype ProductWithoutPrice = Omit<Product, 'price'>;\nconst noPrice: ProductWithoutPrice = { id: 3, name: 'Monitor', inStock: false };\n\n// Record: Create type with specified keys and value type\ntype ProductInventory = Record<number, Product>;\nconst inventory: ProductInventory = {\n  1: { id: 1, name: 'Keyboard', price: 49, inStock: true },\n  2: { id: 2, name: 'Mouse', price: 25, inStock: false }\n};",
    "interface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\n// Simulating API call\nasync function fetchUser(id: number): Promise<User> {\n  const response = await fetch(`https://api.example.com/users/${id}`);\n  if (!response.ok) {\n    throw new Error(`Failed to fetch user: ${response.status}`);\n  }\n  return await response.json() as User;\n}\n\n// Using the async function\nasync function displayUser(userId: number) {\n  try {\n    const user = await fetchUser(userId);\n    console.log(`User: ${user.name}, Email: ${user.email}`);\n  } catch (error) {\n    console.error('Error:', error instanceof Error ? error.message : 'Unknown error');\n  }\n}\n\ndisplayUser(1);\n\n// Promise.all with TypeScript\nasync function fetchMultipleUsers(ids: number[]): Promise<User[]> {\n  const promises = ids.map(id => fetchUser(id));\n  return await Promise.all(promises);\n}",
    "// Generic function\nfunction identity<T>(arg: T): T {\n  return arg;\n}\n\nconst output = identity<string>('hello');\nconst numOutput = identity<number>(42);\n\n// Generic interface\ninterface KeyValuePair<K, V> {\n  key: K;\n  value: V;\n}\n\nconst pair1: KeyValuePair<number, string> = { key: 1, value: 'one' };\nconst pair2: KeyValuePair<string, boolean> = { key: 'isActive', value: true };\n\n// Generic class\nclass DataStore<T> {\n  private data: T[] = [];\n  \n  addItem(item: T) {\n    this.data.push(item);\n  }\n  \n  getItem(index: number): T {\n    return this.data[index];\n  }\n}\n\nconst stringStore = new DataStore<string>();\nstringStore.addItem('first');\nstringStore.addItem('second');\n\nconst numberStore = new DataStore<number>();\nnumberStore.addItem(10);\nnumberStore.addItem(20);",
    "class Person {\n  // Public by default\n  name: string;\n  \n  // Private field\n  private age: number;\n  \n  // Protected field\n  protected email: string;\n  \n  // Readonly field\n  readonly id: number;\n  \n  // Static property\n  static species = 'Homo sapiens';\n  \n  constructor(name: string, age: number, email: string) {\n    this.name = name;\n    this.age = age;\n    this.email = email;\n    this.id = Math.random();\n  }\n  \n  // Public method\n  greet() {\n    return `Hello, my name is ${this.name} and I'm ${this.age} years old.`;\n  }\n  \n  // Private method\n  private getBirthYear(): number {\n    return new Date().getFullYear() - this.age;\n  }\n}\n\n// Inheritance\nclass Employee extends Person {\n  department: string;\n  \n  constructor(name: string, age: number, email: string, department: string) {\n    super(name, age, email);\n    this.department = department;\n  }\n  \n  // Override method\n  greet() {\n    return `${super.greet()} I work in ${this.department} department.`;\n  }\n}",
    "// Primitive types\nconst username: string = 'John';\nconst age: number = 30;\nconst isActive: boolean = true;\n\n// Array types\nconst numbers: number[] = [1, 2, 3];\nconst mixed: (string | number)[] = ['hello', 42];\n\n// Tuple\nconst userInfo: [string, number] = ['Alice', 28];\n\n// Interface\ninterface User {\n  id: number;\n  name: string;\n  email?: string; // Optional property\n  readonly createdAt: Date; // Readonly property\n}\n\n// Using the interface\nconst currentUser: User = {\n  id: 1,\n  name: 'John Doe',\n  createdAt: new Date()\n};"
]